import numpy as np
import scipy as sp
import gzip
import pickle


class DenseLayer:
    """Basic definition of layer for neural networks"""

    def __init__(self, input_data: np.ndarray, n_nodes: int, activation_function: str):
        # Create Attributes
        self.input_data = input_data
        self.n_nodes = n_nodes
        self.n_dim, self.n_samples = input_data.shape  # columns indicate the number of training samples
        self.activation_function = activation_function

        self.z = np.zeros((self.n_nodes, 1))
        self.W = np.random.randn(self.n_nodes, self.n_dim)*np.sqrt(1/((self.n_nodes + self.n_dim)))
        self.b = np.ones((self.n_nodes, self.n_samples))  # Columns need to be similar
        self.a = np.zeros((self.n_nodes, 1))
        self.da_dz = []
        self.dJ_dw = np.zeros((self.n_samples, self.n_nodes, self.n_dim))
        self.dJ_db = np.zeros((self.n_nodes, self.n_samples ))
        self.delta = []

    def forward_propagation(self):
        self.z = np.dot(self.W, self.input_data) + self.b
        self.a = self.forward_activation(self.z)
        return self.a

    def forward_propagation_offset(self, input_values, j , k, offset):
        tempW = self.W
        tempW[j, k] = self.W[j, k] + offset
        tempz = np.matmul(tempW, input_values) + self.b
        tempa = self.forward_activation(tempz)
        return tempa

    def forward_propagation_boffset(self, input_values, j , boffset):
        tempb = self.b
        tempb[j,:] = self.b[j,:] + boffset
        tempz = np.matmul(self.W, input_values) + tempb
        tempa = self.forward_activation(tempz)
        return tempa

    def forward_activation(self, z):
        if self.activation_function == "sigmoid":
            # Prevent overflow.
            z = np.clip(z, -500, 500)
            return 1.0 / (1.0 + np.exp(-z))
        elif self.activation_function == "tanh":
            return np.tanh(z)
        elif self.activation_function == "relu":
            return np.maximum(0, z)
        elif self.activation_function == "softmax":
            # stable version is np.exp(X - np.max(X))/ np.sum(np.exp(X), axis=0)
            return np.exp(z) / np.sum(np.exp(z), axis=0)

    def grad_activation(self, z):
        """Note that inputs are the results of the activation function here
        for example: X = sigmoid(z)"""
        if self.activation_function == "sigmoid":
            a = self.forward_activation(z)
            self.da_dz = a*(1-a)
        elif self.activation_function == "tanh":
            self.da_dz = (1 - np.square(z))
        elif self.activation_function == "relu":
            self.da_dz = 1.0 * (z > 0)
        elif self.activation_function == "softmax":
            a= self.forward_activation(z)
            # Usually softmax is in the output layer hence n_nodes = n_outputs
            # Each sample has its own Jacobian size(n_outputs x n_outputs)
            jacobian_a = np.zeros((self.n_samples, self.n_nodes, self.n_nodes))
            for sample in range(self.n_samples):
                for i in range(self.n_nodes):
                    for j in range(self.n_nodes):
                        if i == j:
                            jacobian_a[sample,i,j] = a[i][sample] * (1 - a[i][sample])
                        else:
                            jacobian_a[sample,i,j] = -a[i][sample] * a[j][sample]
            self.da_dz = jacobian_a
        return self.da_dz

    def get_output_size(self):
        return np.array([self.n_nodes, self.n_samples])


class Network:
    """ Class contains layers"""

    def __init__(self, layers: list, input_data: np.ndarray, output_targets: np.array, learning_rate: float, n_epoch: int):
        self.layers = layers  # This is a list of layer classes
        self.input_data = input_data
        self.n_dim, self.n_samples = input_data.shape  # columns indicate the number of training samples
        self.output_values = []
        self.matrix_cost = []
        self.output_targets = output_targets
        self.learning_rate = learning_rate
        self.dJ_da = []
        self.n_epoch = n_epoch

    def forward_pass(self):
        output_values = []
        for ilayer, layer in enumerate(self.layers):
            if ilayer == 0:
                self.layers[ilayer].input_data = self.input_data
            else:
                self.layers[ilayer].input_data = output_values
            output_values = self.layers[ilayer].forward_propagation()
        self.output_values = output_values
        return self.output_values

    def dJ_dw_diff(self, ilayer_w, j, k, offset):
        temp_outputs = self.forward_pass_offset(ilayer_w, j, k, offset)
        delta_J = self.calculate_cost_pred(temp_outputs) - self.calculate_cost_pred(self.output_values)
        delta_w = offset
        return delta_J/delta_w

    def dJ_db_diff(self, ilayer_b, j, b_offset):
        temp_outputs = self.forward_pass_boffset(ilayer_b, j, b_offset)
        delta_J = self.calculate_cost_pred(temp_outputs) - self.calculate_cost_pred(self.output_values)
        delta_b = b_offset
        return delta_J/delta_b

    def calculate_matrix_cost(self):
        # self.output_values - self.output_targets
        # (((1-self.output_targets)*np.log(1-self.output_values)+self.output_targets*np.log(self.output_values)))
        self.matrix_cost = - np.multiply(self.output_targets, np.log(self.output_values))

    def calculate_total_cost(self):
        # - np.sum(((1-self.output_targets)*np.log(1-self.output_values)+self.output_targets*np.log(self.output_values)))/self.n_samples
        return - (1/self.n_samples)*np.sum(np.multiply(self.output_targets, np.log(self.output_values)))

    def calculate_cost_pred(self, input_predictions):
        # - np.sum(((1-self.output_targets)*np.log(1-self.output_values)+self.output_targets*np.log(self.output_values)))/self.n_samples
        return - (1/1) * np.sum(np.multiply(self.output_targets, np.log(input_predictions)), axis=0)


    def derivative_cost(self, predictions):
        #  (self.matrix_cost - self.output_targets)/(self.matrix_cost - np.multiply(self.matrix_cost, self.matrix_cost))
        """Derivative of cost relative to a or last layer's activation function, softmax usually dJ_da"""
        #https://condor.depaul.edu/~ntomuro/courses/578/notes/3-Backprop-More.pdf
        #return np.divide(-self.output_targets[:, isample][np.newaxis].transpose(), predictions)
        return np.divide(predictions - self.output_targets[:, :][np.newaxis].transpose(), predictions * (1-predictions))

    # an auxiliary function that converts probability into class
    def convert_prob_into_binary(self, predictions, threshold):
        predictions_binary = np.copy(predictions)
        predictions_binary[predictions_binary > threshold] = 1
        predictions_binary[predictions_binary <= threshold] = 0
        return predictions_binary

    def get_accuracy(self, predictions):
        prediction_binary = self.convert_prob_into_binary(predictions, 0.5)
        return (prediction_binary == self.output_targets).all(axis=0).mean()

    def backpropagation(self):
        predictions = self.forward_pass()
        # First calculate error (self.delta) of output layer
        L = len(self.layers) - 1
        # Number of outputs equal to number of nodes of the output layer
        self.layers[L].delta = np.zeros((self.layers[L].n_nodes, self.n_samples))
        dCost_da = self.derivative_cost(predictions)  # Calculates dJ_da of output layer
        da_dz = self.layers[L].grad_activation(self.layers[L].z)  # Calculates da_dz
        if self.layers[L].activation_function == "softmax":
            # Softmax case is a bit special because Jacobian
            for sample in range(self.n_samples):
                delta_cost = np.matmul(da_dz, dCost_da)
        else:
            delta_cost = np.multiply(da_dz, dCost_da)

        delta_cost = self.output_targets - predictions

        for iLayer in range(L, -1, -1):
            if iLayer == L:
                delta_temp = np.multiply(delta_cost, da_dz)
                self.layers[iLayer].dJ_dw = np.matmul(delta_temp, self.layers[iLayer - 1].a.T) / self.n_samples
                self.layers[iLayer].dJ_db = np.sum(delta_temp, axis=1)[np.newaxis].T / self.n_samples
                delta = np.matmul(self.layers[iLayer].W.T, delta_cost)
            else:
                da_dz = self.layers[iLayer].grad_activation(self.layers[iLayer].z)
                delta_temp = np.multiply(delta, da_dz)
                if iLayer == 0:
                    self.layers[iLayer].dJ_dw = np.matmul(delta_temp, self.input_data.T)/self.n_samples
                else:
                    self.layers[iLayer].dJ_dw = np.matmul(delta_temp, self.layers[iLayer - 1].a.T)/self.n_samples
                self.layers[iLayer].dJ_db = np.sum(delta_temp, axis=1)[np.newaxis].T/self.n_samples
                delta = np.matmul(self.layers[iLayer].W.T, delta)

        for iLayer in range(L, -1, -1):
            self.layers[iLayer].W += (self.learning_rate ) * self.layers[iLayer].dJ_dw
            self.layers[iLayer].b += (self.learning_rate) * self.layers[iLayer].dJ_db

    def training(self):
        for iepoch in range(self.n_epoch):
            self.backpropagation()
            predictions = self.forward_pass()
            accuracy = self.get_accuracy(predictions)
            print("epoch", iepoch, "accuracy", accuracy)

class InputLayer:
    """Necessary basic input layer"""

    def __init__(self, input_data: np.ndarray):
        self.input_data = input_data


class OutputLayer:
    """Necessary basic outptut layer"""

    def __init__(self, input_data: np.ndarray):
        self.input_data = input_data

# Load the MNIST data
def load_data_shared(filename="C:/Workspaces/NeuralNetworkFramework/data/mnist.pkl.gz"):
    f = gzip.open(filename, 'rb')
    training_data, validation_data, test_data = pickle.load(f, encoding="latin1")
    f.close()
    return training_data, validation_data, test_data


training_data, validation_data, test_data = load_data_shared()


# Only 5000 samples otherwise running out of memory
training_data_input = training_data[0][0:2].transpose()
# One-hot encoding the outputs
training_data_outputs = np.zeros((10, training_data_input.shape[1]))
for iPos in range(training_data_input.shape[1]):
    training_data_outputs[training_data[1][iPos]][iPos] = 1


layer1 = DenseLayer(training_data_input, 200, "sigmoid")
layer2 = DenseLayer(np.zeros( layer1.get_output_size()), 80, "sigmoid")
layer3 = DenseLayer(np.zeros( layer2.get_output_size()), 10, "sigmoid")


layer_list = [layer1, layer2, layer3]

NN = Network(layer_list, training_data_input, training_data_outputs, learning_rate=0.1, n_epoch=100)

NN.training()

# NN.backpropagation()


print('Hello')


